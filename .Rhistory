category_sales_summary <- df %>%
group_by(month, main_category) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Check and display the column names in the dataframe
colnames(df)
# Display the character codes of the column names to check for hidden or unwanted characters
sapply(colnames(df), function(x) { utf8ToInt(x) })
# Rename the column "page 1 (main category)" to "main_category"
colnames(df)[which(colnames(df) == "page 1 (main category)")] <- "main_category"
# Alternatively, if you want to automatically clean up the column names
colnames(df) <- gsub("\\s+", " ", colnames(df))  # Replace multiple spaces with a single space
colnames(df) <- trimws(colnames(df))  # Trim leading and trailing spaces
# Summarize data by month and product category
category_sales_summary <- df %>%
group_by(month, main_category) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Check and display the column names in the dataframe
colnames(df)
# Display the character codes of the column names to check for hidden or unwanted characters
sapply(colnames(df), function(x) { utf8ToInt(x) })
# Rename the column "page 1 (main category)" to "main_category"
colnames(df)[which(colnames(df) == "page 1 (main category)")] <- "main_category"
# Alternatively, if you want to automatically clean up the column names
colnames(df) <- gsub("\\s+", " ", colnames(df))  # Replace multiple spaces with a single space
colnames(df) <- trimws(colnames(df))  # Trim leading and trailing spaces
# Summarize data by month and product category
category_sales_summary <- df %>%
group_by(month, `page 1 (main category)`) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Check and display the column names in the dataframe
colnames(df)
# Display the character codes of the column names to check for hidden or unwanted characters
sapply(colnames(df), function(x) { utf8ToInt(x) })
# Rename the column "page 1 (main category)" to "main_category"
colnames(df)[which(colnames(df) == "page 1 (main category)")] <- "main_category"
# Alternatively, if you want to automatically clean up the column names
colnames(df) <- gsub("\\s+", " ", colnames(df))  # Replace multiple spaces with a single space
colnames(df) <- trimws(colnames(df))  # Trim leading and trailing spaces
# Summarize data by month and product category
category_sales_summary <- df %>%
group_by(month, main_category) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
colnames(df)
# Rename the column if it hasn't been renamed already
df <- df %>%
rename(main_category = `page 1 (main category)`)
colnames(df)
# Rename the column if it hasn't been renamed already
df <- df %>%
rename(main_category = `page 1 (main category)`)
colnames(df)
# Rename the column if it hasn't been renamed already
df <- df %>%
rename(main_category = `page 1 (main category)`)
# Summarize product_sold by month
monthly_sales_summary <- data %>%
group_by(month) %>%
summarize(total_sales = sum(product_sold), .groups = 'drop')
# Scatter plot of sales by month with a line chart
ggplot(monthly_sales_summary, aes(x = month, y = total_sales)) +
geom_point(color = "blue") +
geom_line(color = "darkorange", size = 1) +
labs(title = "Total Sales by Month", x = "Month", y = "Total Sales") +
theme_minimal()
# Summarize product_sold by month
monthly_sales_summary <- data %>%
group_by(month) %>%
summarize(total_sales = sum(product_sold), .groups = 'drop')
# Scatter plot of sales by month with a line chart
ggplot(monthly_sales_summary, aes(x = month, y = total_sales)) +
geom_point(color = "blue") +
geom_line(color = "darkorange", size = 1) +
labs(title = "Total Sales by Month", x = "Month", y = "Total Sales") +
theme_minimal()
group in
group
# Summarize product_sold by month
monthly_sales <- df %>%
group_by(month) %>%
summarize(total_sales = sum(product_sold))
# Scatter plot of sales by month
ggplot(monthly_sales, aes(x = month, y = total_sales)) +
geom_point() +
geom_line() +
labs(title = "Total Sales by Month", x = "Month", y = "Total Sales") +
theme_minimal()
# Summarize total products sold by category and month
category_sales_summary <- df %>%
group_by(month, page.1..main.category.) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Plot sales by category and month
ggplot(category_sales_summary, aes(x = month, y = total_sold, color = factor(page.1..main.category.))) +
geom_line(size = 1.2) +
geom_point(size = 2.5) +
labs(title = "Monthly Product Sales by Category", x = "Month", y = "Total Products Sold") +
scale_color_brewer(palette = "Set1", name = "Product Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize total products sold by category and month
category_sales_summary <- df %>%
group_by(month, page.1..main.category.) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Plot sales by category and month
ggplot(category_sales_summary, aes(x = month, y = total_sold, color = factor(page.1..main.category.))) +
geom_line(size = 1.2) +
geom_point(size = 2.5) +
labs(title = "Monthly Product Sales by Category", x = "Month", y = "Total Products Sold") +
scale_color_brewer(palette = "Set1", name = "Product Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize product_sold by month
monthly_sales_summary <- data %>%
group_by(month) %>%
summarize(total_sales = sum(product_sold), .groups = 'drop')
# Scatter plot of sales by month with a line chart
ggplot(monthly_sales_summary, aes(x = month, y = total_sales)) +
geom_point(color = "blue") +
geom_line(color = "darkorange", size = 1) +
labs(title = "Total Sales by Month", x = "Month", y = "Total Sales") +
theme_minimal()
# Summarize total products sold by category and month
category_sales_summary <- df %>%
group_by(month, page.1..main.category.) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Plot sales by category and month
ggplot(category_sales_summary, aes(x = month, y = total_sold, color = factor(page.1..main.category.))) +
geom_line(size = 1.2) +   # Draws lines connecting the points
geom_point(size = 2.5) +  # Adds points to the plot
labs(title = "Monthly Product Sales by Category", x = "Month", y = "Total Products Sold") +
scale_color_brewer(palette = "Set1", name = "Product Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize total products sold by category and month
category_sales_summary <- df %>%
group_by(month, page.1..main.category.) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Plot sales by category and month
ggplot(category_sales_summary, aes(x = month, y = total_sold, color = factor(page.1..main.category.))) +
geom_line(size = 1.2) +   # Draws lines connecting the points
geom_point(size = 2.5) +  # Adds points to the plot
labs(title = "Monthly Product Sales by Category", x = "Month", y = "Total Products Sold") +
scale_color_brewer(palette = "Set1", name = "Product Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize total products sold by category and month
category_sales_summary <- df %>%
group_by(month, page.1..main.category.) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Plot sales by category and month
ggplot(category_sales_summary, aes(x = month, y = total_sold, color = factor(page.1..main.category.))) +
geom_line(size = 1) +   # Draws lines connecting the points
geom_point(size = 3) +  # Adds points to the plot
labs(title = "Monthly Product Sales by Category", x = "Month", y = "Total Products Sold") +
scale_color_brewer(palette = "Set1", name = "Product Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize total products sold by category and month
category_sales_summary <- df %>%
group_by(month, page.1..main.category.) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Plot sales by category and month
ggplot(category_sales_summary, aes(x = month, y = total_sold, color = factor(page.1..main.category.))) +
geom_line(size = 1.2) +
geom_point(size = 2.5) +
labs(title = "Monthly Product Sales by Category", x = "Month", y = "Total Products Sold") +
scale_color_brewer(palette = "Set1", name = "Product Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize product sales by price
price_sales_summary <- df %>%
group_by(price) %>%
summarize(total_sold = sum(product_sold, na.rm = TRUE), .groups = 'drop')
# Bar plot for product sales by price with updated colors
ggplot(price_sales_summary, aes(x = price, y = total_sold)) +
geom_bar(stat = "identity", fill = "lightcoral") +
labs(title = "Total Products Sold by Price", x = "Price", y = "Number of Products Sold") +
theme_minimal()
# Load required libraries
library(readxl)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
# Import data from the Excel file
data <- read_excel("e-shop clothing 2008.xlsx")
# Extract column names by splitting the first row using semicolons
column_names <- strsplit(colnames(data)[1], ";")[[1]]
# Use semicolons to split the data into separate columns
data <- data %>%
separate(col = colnames(data)[1],
into = column_names,
sep = ";", fill = 'right')
# Remove unwanted columns: "year" and "page 2 (clothing model)"
data <- data %>%
select(-year, -`page 2 (clothing model)`)
# Rename columns for clarity
data <- data %>%
rename(click_stream = `order(sells)`,
session_ID = `session ID`)
# Create a new column 'product_sold' indicating if a product was sold
data <- data %>%
group_by(session_ID) %>%
mutate(product_sold = ifelse(click_stream == max(click_stream), 1, 0)) %>%
ungroup()
# Display the first few rows of the modified dataframe
head(data)
View(data)
# Add a new column 'Revenue' calculated as price multiplied by product_sold
df <- df %>%
mutate(Revenue = price * product_sold)
# Add a new column 'Revenue' calculated as price multiplied by product_sold
df <- df %>%
mutate(Revenue = price * product_sold)
# Add a new column 'Revenue' calculated as price multiplied by product_sold
df <- df %>%
mutate(Revenue = price * product_sold)
# Create Revenue column
df <- df %>%
mutate(Revenue = price * product_sold)
# Ensure columns are numeric
df <- df %>%
mutate(
price = as.numeric(price),
product_sold = as.numeric(product_sold)
) %>%
mutate(Revenue = price * product_sold)
# Ensure columns are numeric
df <- df %>%
mutate(
price = as.numeric(price),
product_sold = as.numeric(product_sold)
) %>%
mutate(Revenue = price * product_sold)
# Ensure columns are numeric
df <- df %>%
mutate(
price = as.numeric(price),
product_sold = as.numeric(product_sold)
) %>%
mutate(Revenue = price * product_sold)
# Calculate total revenue by month
monthly_revenue_summary <- df %>%
group_by(month) %>%
summarize(total_revenue = sum(Revenue, na.rm = TRUE), .groups = 'drop')
# Plot the total revenue by month using a bar chart
ggplot(monthly_revenue_summary, aes(x = month, y = total_revenue)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Monthly Revenue Overview", x = "Month", y = "Total Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Read data from an Excel file into a data frame
dframe <- read_excel('input.xlsx')
# Separate the first column into six new columns based on whitespace
dframe <- dframe %>%
separate(col = colnames(dframe)[1], into = c("id", "id2", "name", "salary", "start_date", "dept"), sep = "\\s+", convert = TRUE)
# Remove the 'id2' column from the data frame
dframe <- dframe %>%
select(-id2)
dframe$salary <- as.numeric(dframe$salary)
# Display the transformed data frame
View(dframe)
# Load required libraries
library(readxl)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
# Import data from the Excel file
data <- read_excel("e-shop clothing 2008.xlsx")
# Extract column names by splitting the first row using semicolons
column_names <- strsplit(colnames(data)[1], ";")[[1]]
# Use semicolons to split the data into separate columns
data <- data %>%
separate(col = colnames(data)[1],
into = column_names,
sep = ";", fill = 'right')
# Remove unwanted columns: "year" and "page 2 (clothing model)"
data <- data %>%
select(-year, -`page 2 (clothing model)`)
# Rename columns for clarity
data <- data %>%
rename(click_stream = `order(sells)`,
session_ID = `session ID`)
# Create a new column 'product_sold' indicating if a product was sold
data <- data %>%
group_by(session_ID) %>%
mutate(product_sold = ifelse(click_stream == max(click_stream), 1, 0)) %>%
ungroup()
# Display the first few rows of the modified dataframe
head(data)
View(data)
# Read data from an Excel file into a data frame
dframe <- read_excel('input.xlsx')
# Separate the first column into six new columns based on whitespace
dframe <- dframe %>%
separate(col = colnames(dframe)[1], into = c("id", "id2", "name", "salary", "start_date", "dept"), sep = "\\s+", convert = TRUE)
# Remove the 'id2' column from the data frame
dframe <- dframe %>%
select(-id2)
dframe$salary <- as.numeric(dframe$salary)
# Display the transformed data frame
View(dframe)
# Read data from an Excel file into a data frame
dframe <- read_excel('input.xlsx')
# Separate the first column into six new columns based on whitespace
dframe <- dframe %>%
separate(col = colnames(dframe)[1], into = c("id", "id2", "name", "salary", "start_date", "dept"), sep = "\\s+", convert = TRUE)
# Remove the 'id2' column from the data frame
dframe <- dframe %>%
select(-id2)
dframe$salary <- as.numeric(dframe$salary)
# Display the transformed data frame
View(dframe)
# Load required libraries
library(readxl)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
# Import data from the Excel file
data <- read_excel("e-shop clothing 2008.xlsx")
# Extract column names by splitting the first row using semicolons
column_names <- strsplit(colnames(data)[1], ";")[[1]]
# Use semicolons to split the data into separate columns
data <- data %>%
separate(col = colnames(data)[1],
into = column_names,
sep = ";", fill = 'right')
# Remove unwanted columns: "year" and "page 2 (clothing model)"
data <- data %>%
select(-year, -`page 2 (clothing model)`)
# Rename columns for clarity
data <- data %>%
rename(click_stream = `order(sells)`,
session_ID = `session ID`)
# Create a new column 'product_sold' indicating if a product was sold
data <- data %>%
group_by(session_ID) %>%
mutate(product_sold = ifelse(click_stream == max(click_stream), 1, 0)) %>%
ungroup()
# Display the first few rows of the modified dataframe
head(data)
View(data)
# Display column names
colnames(dframe)
# Calculate Mean Salary
mean_salary <- mean(dframe$salary, na.rm = TRUE)
# Calculate Median Salary
median_salary <- median(dframe$salary, na.rm = TRUE)
# Calculate Mode Salary
# Note: Mode is not directly available in base R; we need to define a custom function
mode_salary <- as.numeric(names(sort(table(dframe$salary), decreasing = TRUE)[1]))
# Calculate Standard Deviation of Salary
sd_salary <- sd(dframe$salary, na.rm = TRUE)
# Calculate Variance of Salary
var_salary <- var(dframe$salary, na.rm = TRUE)
# Print the results
cat("Mean Salary:", mean_salary, "\n")
cat("Median Salary:", median_salary, "\n")
cat("Mode Salary:", mode_salary, "\n")
cat("Standard Deviation of Salary:", sd_salary, "\n")
cat("Variance of Salary:", var_salary, "\n")
# Plot the density of salaries
ggplot(dframe, aes(x = salary)) +
geom_density(fill = "darkblue", alpha = 0.6) +
labs(title = "Salary Distribution Density", x = "Salary", y = "Density") +
theme_minimal()
# Plot the density of salaries
ggplot(dframe, aes(x = salary)) +
geom_density(fill = "darkblue", alpha = 0.6) +
labs(title = "Salary Distribution Density", x = "Salary", y = "Density") +
theme_minimal()
# Load required libraries
library(readxl)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
# Import data from the Excel file
data <- read_excel("e-shop clothing 2008.xlsx")
# Extract column names by splitting the first row using semicolons
column_names <- strsplit(colnames(data)[1], ";")[[1]]
# Use semicolons to split the data into separate columns
data <- data %>%
separate(col = colnames(data)[1],
into = column_names,
sep = ";", fill = 'right')
# Remove unwanted columns: "year" and "page 2 (clothing model)"
data <- data %>%
select(-year, -`page 2 (clothing model)`)
# Rename columns for clarity
data <- data %>%
rename(click_stream = `order(sells)`,
session_ID = `session ID`)
# Create a new column 'product_sold' indicating if a product was sold
data <- data %>%
group_by(session_ID) %>%
mutate(product_sold = ifelse(click_stream == max(click_stream), 1, 0)) %>%
ungroup()
# Display the first few rows of the modified dataframe
head(data)
View(data)
# Convert 'dept' to a factor to ensure it's treated as a categorical variable
dframe$dept <- as.factor(dframe$dept)
# Create a scatter plot showing the relationship between department and salary
ggplot(dframe, aes(x = dept, y = salary)) +
geom_point(color = "red", alpha = 0.6, position = position_jitter(width = 0.3)) +  # Scatter plot with jitter to avoid overlapping points
labs(title = "Scatter Plot of Salary by Department",
x = "Department",
y = "Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Load the starwars dataset
star_wars_df <- starwars
# Replace "none" with NA
star_wars_df[star_wars_df == "none"] <- NA
# View the cleaned dataframe
View(star_wars_df)
# Filter by eyes color and height
star_wars_df %>%
filter(eye_color != "black",
height >150)
# Load required libraries
library(readxl)
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
# Import data from the Excel file
data <- read_excel("e-shop clothing 2008.xlsx")
# Extract column names by splitting the first row using semicolons
column_names <- strsplit(colnames(data)[1], ";")[[1]]
# Use semicolons to split the data into separate columns
data <- data %>%
separate(col = colnames(data)[1],
into = column_names,
sep = ";", fill = 'right')
# Remove unwanted columns: "year" and "page 2 (clothing model)"
data <- data %>%
select(-year, -`page 2 (clothing model)`)
# Rename columns for clarity
data <- data %>%
rename(click_stream = `order(sells)`,
session_ID = `session ID`)
# Create a new column 'product_sold' indicating if a product was sold
data <- data %>%
group_by(session_ID) %>%
mutate(product_sold = ifelse(click_stream == max(click_stream), 1, 0)) %>%
ungroup()
# Display the first few rows of the modified dataframe
head(data)
View(data)
# Filter by eyes color and height
star_wars_df %>%
filter(eye_color != "black",
height >150)
star_wars_df = star_wars_df %>%
mutate(bmi = mass/(height/100))^2)%>%
# Calculate BMI and round to 2 decimal places
star_wars_df <- star_wars_df %>%
mutate(bmi = mass / (height / 100)^2) %>%
mutate(bmi = round(bmi, 2))
# View the updated dataframe
View(star_wars_df)
# Calculate BMI and round to 2 decimal places
star_wars_df <- star_wars_df %>%
mutate(bmi = mass / (height / 100)^2) %>%
mutate(bmi = round(bmi, 2))
# View the updated dataframe
View(star_wars_df)
# Load necessary library
library(ggplot2)
# Create the plot
ggplot(star_wars_df, aes(x = height, y = bmi)) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points and some transparency
labs(title = "Height vs. BMI",
x = "Height (cm)",
y = "BMI") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
ggplot(star_wars_df, aes(x = height, y = bmi)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "loess", color = "red", linetype = "dashed") +
labs(title = "Height vs. BMI with Trend Line",
x = "Height (cm)",
y = "BMI") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(star_wars_df, aes(x = height, y = bmi, size = mass)) +
geom_point(alpha = 0.6) +
labs(title = "Height vs. BMI (Bubble Plot)",
x = "Height (cm)",
y = "BMI",
size = "Mass") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(star_wars_df, aes(x = height, y = bmi)) +
geom_point(color = "blue", alpha = 0.6) +
facet_wrap(~ species) +  # Assuming 'species' is a column in the dataset
labs(title = "Height vs. BMI by Species",
x = "Height (cm)",
y = "BMI") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(star_wars_df, aes(x = height, y = bmi, size = mass)) +
geom_point(alpha = 0.6) +
labs(title = "Height vs. BMI (Bubble Plot)",
x = "Height (cm)",
y = "BMI",
size = "Mass") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
